ls
ls()
getwd()
install.packages('dplyr')
library(dplyr)
install.packages('dplyr',dependencies = TRUE, verbose = TRUE)
install.packages("dplyr", dependencies = TRUE, verbose = TRUE)
library(dplyr)
library(dplyr, warning(FALSE))
getwd()
library(dplyr, warning(FALSE))
library(dplyr, warnings(FALSE))
mtcars
damtcars = mtcars[1:10,c(1,4,6,7,9)]
damtcars
damtcars.mpg
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
mtcars
carsdata <- mtcars[5:25,]
carsdata
cars
carsdata
table(carsdata$mpg)
table(carsdata$cyl)
min(carsdata$mpg)
max(carsdata$mpg)
median(carsdata$mpg)
quantile(carsdata$mpg)
sd(carsdata$mpg)
mean(carsdata$mpg)
cor(carsdata$cyl,carsdata$mpg)
summary(carsdata)
str(carsdata)
library(ggplot2)
table(carsdata$mpg)
ggplot(
data = carsdata,
aes(x=cyl)) +
geom_bar() + # Create a bar chart;  of geometry. since we are making frequency chart
ggtitle("This is the main title ") +
xlab("X label") +
ylab("Y Label")
table(carsdata$cyl)
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram() +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=50) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=10) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=20) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=25) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(data=carsdata, aes(x=mpg,y=cyl)) +
geom_point() +
ggtitle("Plotting Comparison Scatter Plot") +
xlab("Miles Per Gallon") +
ylab("Number of Cylinders")
ggplot(data=carsdata, aes(x=cyl,y=mpg)) +
+ geom_point() +
+ ggtitle("Plotting Comparison Scatter Plot") +
+ xlab("Miles Per Gallon") +
+ ylab("Number of Cylinders")
ggplot(data=carsdata, aes(x=cyl,y=mpg)) +
geom_point() +
ggtitle("Plotting Comparison Scatter Plot") +
xlab("Miles Per Gallon") +
ylab("Number of Cylinders")
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
install.packages("markdown")
library(ggplot2)
ggplot() +
borders(database="world",colour="grey50",fill = "grey90") +
ggtitle("Base Map of world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
install.packages("maps")
library(ggplot2)
ggplot() +
borders(database="world",colour="grey50",fill = "grey90") +
ggtitle("Base Map of world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
unlink('Gdrive/Learning/R_Programming/advanced-dataviz/3_GraphnNetworkData/Graphs_cache', recursive = TRUE)
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input,output) {}
shinyApp(
ui = ui,
server = server
)
### Creating a UI with I/O controls
ui <- fluidPage(
titlePanel("Input and Output"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "number",
label = "Choose A Number",
min = 0,
max = 100,
value = 25)),
mainPanel(
textOutput(
outputId = "text")
)
)
)
#### Creating the server which maps input to output
server <- function(input,output) {
output$text = renderText(
{
paste("You Selected : ",input$number)
}
)
}
#### Creating the ShinyApp
shinyApp(
ui = ui,
server = server
)
-----------
library(RColorBrewer)
library(dplyr)
setwd("/Users/ananyapa/Gdrive/Learning/R_Programming/advanced-dataviz/5_Interactivedata-viz")
movies <- read.csv("Movies.csv")
colors <- brewer.pal(4,"Set3")
#### Creating the User Interface Page
ui <- fluidPage(
titlePanel("Interactive Movies Data"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "Year",
label = "Year",
min = 2000,
max = 2015,
value = c(2000,2016),
sep = ""),
checkboxGroupInput(
inputId = "rating",
label = "Rating",
choices = c("G","PG","PG-13","R"),
selected = c("G","PG","PG-13","R")),
textInput(
inputId = "title",
label = "Title")),
mainPanel(
plotOutput(
outputId = "plot"
)
)
)
)
#### Creating the Server
server <- function(input,output) {
output$plot = renderPlot(
{subset <- movies %>%
filter(Year >= input$year[1]) %>%
filter(Year <= input$year[2]) %>%
filter(Rating %in% input$rating) %>%
filter(grepl(input$title, Title)) %.%
as.data.frame()
plot(
x = subset$Critic.Score,
y = subset$Box.Office,
col = colors[as.integer(ubset$Rating)],
pch = 19,
cex = 1.5,
xlim = c(0,100),
ylim = c(0,800),
xlab = "ritic Score",
ylab = "Revenue")
legend(
x = "topleft",
as.character(levels(movies$Rating)),
col = colors[1:4],
pch = 19,
cex = 1.5)}
)
}
shinyApp(
ui = ui,
server = server
)
server <- function(input,output) {
output$plot = renderPlot(
{subset <- movies %>%
filter(Year >= input$year[1]) %>%
filter(Year <= input$year[2]) %>%
filter(Rating %in% input$rating) %>%
filter(grepl(input$title, Title)) %>%
as.data.frame()
plot(
x = subset$Critic.Score,
y = subset$Box.Office,
col = colors[as.integer(ubset$Rating)],
pch = 19,
cex = 1.5,
xlim = c(0,100),
ylim = c(0,800),
xlab = "ritic Score",
ylab = "Revenue")
legend(
x = "topleft",
as.character(levels(movies$Rating)),
col = colors[1:4],
pch = 19,
cex = 1.5)}
)
}
shinyApp(
ui = ui,
server = server
)
setwd("/Users/ananyapa/Gdrive/Learning/R_Programming/advanced-dataviz/5_Interactivedata-viz")
movies <- read.csv("Movies.csv")
colors <- brewer.pal(4,"Set3")
library(RColorBrewer)
library(dplyr)
library(shiny)
ui <- fluidPage(
titlePanel("Interactive Movies Data"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "Year",
label = "Year",
min = 2000,
max = 2015,
value = c(2000,2016),
sep = ""),
checkboxGroupInput(
inputId = "rating",
label = "Rating",
choices = c("G","PG","PG-13","R"),
selected = c("G","PG","PG-13","R")),
textInput(
inputId = "title",
label = "Title")),
mainPanel(
plotOutput(
outputId = "plot"
)
)
)
)
#### Creating the Server
server <- function(input,output) {
output$plot = renderPlot(
{subset <- movies %>%
filter(Year >= input$year[1]) %>%
filter(Year <= input$year[2]) %>%
filter(Rating %in% input$rating) %>%
filter(grepl(input$title, Title)) %>%
as.data.frame()
plot(
x = subset$Critic.Score,
y = subset$Box.Office,
col = colors[as.integer(ubset$Rating)],
pch = 19,
cex = 1.5,
xlim = c(0,100),
ylim = c(0,800),
xlab = "ritic Score",
ylab = "Revenue")
legend(
x = "topleft",
as.character(levels(movies$Rating)),
col = colors[1:4],
pch = 19,
cex = 1.5)}
)
}
shinyApp(
ui = ui,
server = server
)
server <- function(input,output) {
output$plot = renderPlot(
{subset <- movies %>%
filter(Year >= input$year[1]) %>%
filter(Year <= input$year[2]) %>%
filter(Rating %in% input$rating) %>%
filter(grepl(input$title, Title)) %>%
as.data.frame()
plot(
x = subset$Critic.Score,
y = subset$Box.Office,
col = colors[as.integer(subset$Rating)],
pch = 19,
cex = 1.5,
xlim = c(0,100),
ylim = c(0,800),
xlab = "ritic Score",
ylab = "Revenue")
legend(
x = "topleft",
as.character(levels(movies$Rating)),
col = colors[1:4],
pch = 19,
cex = 1.5)}
)
}
shinyApp(
ui = ui,
server = server
)
#### Creating the User Interface Page
ui <- fluidPage(
titlePanel("Interactive Movies Data"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "year",
label = "Year",
min = 2000,
max = 2015,
value = c(2000,2016),
sep = ""),
checkboxGroupInput(
inputId = "rating",
label = "Rating",
choices = c("G","PG","PG-13","R"),
selected = c("G","PG","PG-13","R")),
textInput(
inputId = "title",
label = "Title")),
mainPanel(
plotOutput(
outputId = "plot"
)
)
)
)
#### Creating the Server
server <- function(input,output) {
output$plot = renderPlot(
{subset <- movies %>%
filter(Year >= input$year[1]) %>%
filter(Year <= input$year[2]) %>%
filter(Rating %in% input$rating) %>%
filter(grepl(input$title, Title)) %>%
as.data.frame()
plot(
x = subset$Critic.Score,
y = subset$Box.Office,
col = colors[as.integer(subset$Rating)],
pch = 19,
cex = 1.5,
xlim = c(0,100),
ylim = c(0,800),
xlab = "ritic Score",
ylab = "Revenue")
legend(
x = "topleft",
as.character(levels(movies$Rating)),
col = colors[1:4],
pch = 19,
cex = 1.5)}
)
}
shinyApp(
ui = ui,
server = server
)
