ls
ls()
getwd()
install.packages('dplyr')
library(dplyr)
install.packages('dplyr',dependencies = TRUE, verbose = TRUE)
install.packages("dplyr", dependencies = TRUE, verbose = TRUE)
library(dplyr)
library(dplyr, warning(FALSE))
getwd()
library(dplyr, warning(FALSE))
library(dplyr, warnings(FALSE))
mtcars
damtcars = mtcars[1:10,c(1,4,6,7,9)]
damtcars
damtcars.mpg
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
mtcars
carsdata <- mtcars[5:25,]
carsdata
cars
carsdata
table(carsdata$mpg)
table(carsdata$cyl)
min(carsdata$mpg)
max(carsdata$mpg)
median(carsdata$mpg)
quantile(carsdata$mpg)
sd(carsdata$mpg)
mean(carsdata$mpg)
cor(carsdata$cyl,carsdata$mpg)
summary(carsdata)
str(carsdata)
library(ggplot2)
table(carsdata$mpg)
ggplot(
data = carsdata,
aes(x=cyl)) +
geom_bar() + # Create a bar chart;  of geometry. since we are making frequency chart
ggtitle("This is the main title ") +
xlab("X label") +
ylab("Y Label")
table(carsdata$cyl)
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram() +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=50) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=10) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=20) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=25) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(data=carsdata, aes(x=mpg,y=cyl)) +
geom_point() +
ggtitle("Plotting Comparison Scatter Plot") +
xlab("Miles Per Gallon") +
ylab("Number of Cylinders")
ggplot(data=carsdata, aes(x=cyl,y=mpg)) +
+ geom_point() +
+ ggtitle("Plotting Comparison Scatter Plot") +
+ xlab("Miles Per Gallon") +
+ ylab("Number of Cylinders")
ggplot(data=carsdata, aes(x=cyl,y=mpg)) +
geom_point() +
ggtitle("Plotting Comparison Scatter Plot") +
xlab("Miles Per Gallon") +
ylab("Number of Cylinders")
getwd()
setwd("/Users/ananyapa/Gdrive/R_programming")
# preparing the data
setwd("/Users/ananyapa/Gdrive/LEARNING/R_Programming/DataVisualization")
movies <- read.csv("movies.csv", header = TRUE)
movies
head(movies)
names(movies)
names(movies)[names(movies) == "Runtime..Minutes."] <- "Runlength"
names(movies)[names(movies) == "Revenue..Millions."] <- "Revenue"
names(movies)
library(ggplot2)
ggplot(data = movies, aes(x = Runlength, y = Revenue)) +
geom_point() +
gtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (monites)") +
ylab("Movie Revenue (Milion Dollars)")
library(ggplot2)
ggplot(data = movies, aes(x = Runlength, y = Revenue)) +
geom_point() +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (monites)") +
ylab("Movie Revenue (Milion Dollars)")
ggplot(data = movies, aes(x = Runlength, y = Revenue)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (monites)") +
ylab("Movie Revenue (Milion Dollars)")
library(ggplot2)
ggplot(data = movies, aes(x = Runlength, y = Revenue)) +
geom_point() +
# geom_smooth(method = "lm") +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (monites)") +
ylab("Movie Revenue (Milion Dollars)")
ggplot(data = movies, aes(x = Runlength, y = Revenue)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (monites)") +
ylab("Movie Revenue (Milion Dollars)")
=
ggplot(data = movies, aes(x = Runlength, y = Revenue)) +
stat_bin2d() +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (monites)") +
ylab("Movie Revenue (Milion Dollars)")
ggplot(data = movies, aes(x = Runlength, y = Revenue)) +
stat_bin_hex() +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (monites)") +
ylab("Movie Revenue (Milion Dollars)")
ggplot(data = movies, aes(x = Runlength, y = Revenue)) +
stat_bin_hex() +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (minutes)") +
ylab("Movie Revenue (Milion Dollars)")
ggplot(data = movies, aes(x = Runlength, y = Revenue)) +
geom_density2d() +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (minutes)") +
ylab("Movie Revenue (Milion Dollars)")
ggplot(data = movies, aes(x = Runlength, y = Revenue)) +
geom_density2d(aes(fill= ..level..), geom = polygon()) +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (minutes)") +
ylab("Movie Revenue (Milion Dollars)")
ggplot(data = movies, aes(x = Runlength, y = Revenue)) +
geom_density2d(aes(fill= ..level..), geom = polygon +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (minutes)") +
ylab("Movie Revenue (Milion Dollars)")
)
ggplot(data = movies, aes(x = Runlength, y = Revenue)) +
geom_density2d(aes(fill= ..level..), geom = polygon) +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (minutes)") +
ylab("Movie Revenue (Milion Dollars)")
ggplot(data = movies, aes(x = Runlength, y = Revenue)) +
geom_density2d(aes(fill= ..level..), geom = "polygon") +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (minutes)") +
ylab("Movie Revenue (Milion Dollars)")
ggplot(data = movies, aes(x = Runlength, y = Revenue)) +
stat_density2d(aes(fill= ..level..), geom = "polygon") +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (minutes)") +
ylab("Movie Revenue (Milion Dollars)")
times <- read.csv("timeseries.csv")
head(times)
ggplot(data = times, aes(x = Month, y = sunspots)) +
ggplot(data = times, aes(x = Month, y = sunspots)) +
geom_step() +
expand_limits(y = 0) +
ggtitle("Plotting time series, by date") +
xlab("Movie Length (minutes)") +
ylab("Movie Revenue (Milion Dollars)")
ggplot(data = times, aes(x = sunspot.year, y = Month)) +
geom_step() +
expand_limits(y = 0) +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (minutes)") +
ylab("Movie Revenue (Milion Dollars)")
ggplot(data = times, aes(x = sunspots, y = Month)) +
geom_step() +
expand_limits(y = 0) +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (minutes)") +
ylab("Movie Revenue (Milion Dollars)")
y
ggplot(data = times, aes(x = sunspots, y = Month)) +
geom_step() +
#  expand_limits(y = 0) +
ggtitle("Plotting revenue and length ggplot") +
xlab("Movie Length (minutes)") +
ylab("Movie Revenue (Milion Dollars)")
# Calculating the aggregate for the analysis.
aberage <- tapply(movies$Revenue, movies$Rating, mean)
average
aberage
# Calculating the aggregate for the analysis.
aberage <- tapply(movies$Revenue, movies$Rating, mean, na.rm = TRUE)
aberage
# Calculating the aggregate for the analysis.
aberage <- tapply(movies$Revenue, movies$Cat1, mean, na.rm = TRUE)
aberage
barplot(height = aberage,
main = "Plotting Average Revenue by each category",
xlab = "Movie Categories",
ylab = "Revenue")
plot(x = movies$Cat1,
y = movies$Revenue,
main = "Plotting Average Revenue by each category",
xlab = "Movie Categories",
ylab = "Revenue")
plot(x = movies$Cat1,
y = movies$Revenue,
notch = TRUE,
main = "Plotting Average Revenue by each category",
xlab = "Movie Categories",
ylab = "Revenue")
ggplot(data = aberage, aes(x = Cat1, y = Revenue)) +
eom_bar(stat = "identity") +
ggtitle("Plotting Revenue aggregated per category") +
xlab("Movie Categories") +
ylab("Revenue in Million Dollars")
names(aberage)
library(dplyr)
aberage <- movies %>% select(Cat1, Revenue) %>% group_by(Cat1) %>%
summarize(mRevenue = mean(Revenue)) %>% as.data.frame()
aberage
aberage <- movies %>% select(Cat1, Revenue) %>% group_by(Cat1) %>%
summarize(mRevenue = mean(Revenue, na.rm = TRUE)) %>% as.data.frame()
aberage
ggplot(data = aberage, aes(x = Cat1, y = mRevenue)) +
eom_bar(stat = "identity") +
ggtitle("Plotting Revenue aggregated per category") +
xlab("Movie Categories") +
ylab("Revenue in Million Dollars")
ggplot(data = aberage, aes(x = Cat1, y = mRevenue)) +
geom_bar(stat = "identity") +
ggtitle("Plotting Revenue aggregated per category") +
xlab("Movie Categories") +
ylab("Revenue in Million Dollars")
ggplot(data = aberage, aes(x = Cat1, y = mRevenue, col = "skyblue")) +
geom_bar(stat = "identity") +
ggtitle("Plotting Revenue aggregated per category") +
xlab("Movie Categories") +
ylab("Revenue in Million Dollars")
ggplot(data = aberage, aes(x = Cat1, y = mRevenue)) +
geom_boxplot() +
ggtitle("Plotting Revenue aggregated per category") +
xlab("Movie Categories") +
ylab("Revenue in Million Dollars")
ggplot(data = aberage, aes(x = Cat1, y = mRevenue)) +
geom_boxplot(notch = TRUE) +
ggtitle("Plotting Revenue aggregated per category") +
xlab("Movie Categories") +
ylab("Revenue in Million Dollars")
ggplot(data = aberage, aes(x = Cat1, y = mRevenue)) +
geom_violin() +
ggtitle("Plotting Revenue aggregated per category") +
xlab("Movie Categories") +
ylab("Revenue in Million Dollars")
aberage
ggplot(data = movies, aes(x = Cat1, y = Revenue)) +
geom_boxplot(notch = TRUE) +
ggtitle("Plotting Revenue aggregated per category") +
xlab("Movie Categories") +
ylab("Revenue in Million Dollars")
ggplot(data = movies, aes(x = Cat1, y = Revenue)) +
geom_violin() +
ggtitle("Plotting Revenue aggregated per category") +
xlab("Movie Categories") +
ylab("Revenue in Million Dollars")
