ls
ls()
getwd()
install.packages('dplyr')
library(dplyr)
install.packages('dplyr',dependencies = TRUE, verbose = TRUE)
install.packages("dplyr", dependencies = TRUE, verbose = TRUE)
library(dplyr)
library(dplyr, warning(FALSE))
getwd()
library(dplyr, warning(FALSE))
library(dplyr, warnings(FALSE))
mtcars
damtcars = mtcars[1:10,c(1,4,6,7,9)]
damtcars
damtcars.mpg
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
mtcars
carsdata <- mtcars[5:25,]
carsdata
cars
carsdata
table(carsdata$mpg)
table(carsdata$cyl)
min(carsdata$mpg)
max(carsdata$mpg)
median(carsdata$mpg)
quantile(carsdata$mpg)
sd(carsdata$mpg)
mean(carsdata$mpg)
cor(carsdata$cyl,carsdata$mpg)
summary(carsdata)
str(carsdata)
library(ggplot2)
table(carsdata$mpg)
ggplot(
data = carsdata,
aes(x=cyl)) +
geom_bar() + # Create a bar chart;  of geometry. since we are making frequency chart
ggtitle("This is the main title ") +
xlab("X label") +
ylab("Y Label")
table(carsdata$cyl)
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram() +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=50) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=10) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=20) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=25) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(data=carsdata, aes(x=mpg,y=cyl)) +
geom_point() +
ggtitle("Plotting Comparison Scatter Plot") +
xlab("Miles Per Gallon") +
ylab("Number of Cylinders")
ggplot(data=carsdata, aes(x=cyl,y=mpg)) +
+ geom_point() +
+ ggtitle("Plotting Comparison Scatter Plot") +
+ xlab("Miles Per Gallon") +
+ ylab("Number of Cylinders")
ggplot(data=carsdata, aes(x=cyl,y=mpg)) +
geom_point() +
ggtitle("Plotting Comparison Scatter Plot") +
xlab("Miles Per Gallon") +
ylab("Number of Cylinders")
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
install.packages("markdown")
library(ggplot2)
ggplot() +
borders(database="world",colour="grey50",fill = "grey90") +
ggtitle("Base Map of world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
install.packages("maps")
library(ggplot2)
ggplot() +
borders(database="world",colour="grey50",fill = "grey90") +
ggtitle("Base Map of world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
unlink('Gdrive/Learning/R_Programming/advanced-dataviz/3_GraphnNetworkData/Graphs_cache', recursive = TRUE)
setwd("/Users/ananyapa/Gdrive/Learning/R_Programming/advanced-dataviz/4_TextualData")
plotts <- read.csv("Plots.csv")
head(plotts)
summary
(plotts)
dim(plotts)
rownames(plotts)
colnames(plotts)
plotts$Plot <- as.character(plotts$Plot)
head(plotts,2)
install.packages("tm")
library(tm)
if require("tm") {
library(tm)
}
else {
install.packages("tm");
library(tm)
}
install.packages("tm")
if require("tm") == TRUE {
library(tm)
}
else {
install.packages("tm");
library(tm)
}
install.packages("tm")
if require("tm") == FALSE {
library(tm)
}
else {
install.packages("tm");
library(tm)
}
if (require("tm") == FALSE) {
library(tm)
}
else {
install.packages("tm");
library(tm)
}
if (require("tm") == TRUE) {
library(tm)
}
else {
install.packages("tm");
library(tm)
}
if("tm" %in% rownames(installed.packages()) == TRUE) {
library(tm)
}
else {
install.packages("tm");
library(tm)
}
if("tm" %in% rownames(installed.packages()) == FALSE) {
install.packages("tm")
}
library(tm)
install.packages("SnowballC")
library(SnowballC)
# converting the data to corpus
corpus <- Corpus(VectorSource(plotts$Plot))
corpus[[1]]$content
# Transforming to lower case
corpus <- tm_map(corpus,content_transformer(tolower))
# Transforming to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
corpus[[1]]$content
# Transforming to lower case
Encoding(corpus)  <- "UTF-8"
Encoding(plotts$Plot)  <- "UTF-8"
# converting the data to corpus
corpus <- Corpus(VectorSource(plotts$Plot))
corpus[[1]]$content
corpus <- tm_map(corpus, content_transformer(tolower))
plotts$Plot <- iconv(plotts$Plot, "ASCII", "UTF-8", sub="byte")
# converting the data to corpus
corpus <- Corpus(VectorSource(plotts$Plot))
Looking at first entry in the corpus
corpus[[1]]$content
# Transforming to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
corpus
corpus[[1]]$content
# To Supress all warnings
options(warn=-1)
# Transforming to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
# Removing punctuation
corpus <- tm_map(corpus, removePunctuation)
# Removing stop words
corpus <- tm_map(corpus, removeWords, stopwords, "english")
# Removing stop words
corpus <- tm_map(corpus, removeWords, stopwords("english"))
# next we reduce words to stem using stemdocument function
corpus <- tm_map(corpus, stemDocument, "english")
corpus[[1]]$content
# Removing the exrra spaces
corpus <- tm_map(corpus, stripWhitespace)
#Lets convert the corpus to plain text document for preparation of word cloud
corpustext <- tm_map(corpus, PlainTextDocument)
corpustext[[1]]$content
if("wordcloud" %in% rownames(installed.packages()) == FALSE) {
install.packages("wordcloud") }
library(wordcloud)
wordcloud(
words = corpustext,
max.words = 50
)
wordcloud(
words = corpustext,
max.words = 50
)
wordcloud(
words = corpus,
max.words = 50
)
words <- read.csv("Words.csv")
head(words)
wordcloud(
words = words$Term,
freq = words$Box.Office,
max.words = 50,
scale = c(2,0.1)
)
library(RColorBrewer)
library(RColorBrewer)
palett <- brewer.pal(
n = 9,
name = "Oranges"
)
color<- palett[cut(words$Critic.Score, 0)]
color<- palett[cut(words$Critic.Score, 9)]
color
wordcloud(
words = words$Term,
freq = words$Box.Office,
max.words = 50,
scale = c(2,0.5),
colors = color,
ordered.colors = TRUE
)
wordcloud(
words = words$Term,
freq = words$Box.Office,
max.words = 50,
scale = c(3,0.3),
colors = color,
ordered.colors = TRUE
)
wordcloud(
words = words$Term,
freq = words$Box.Office,
max.words = 50,
scale = c(2.5,0.2),
colors = color,
ordered.colors = TRUE
)
