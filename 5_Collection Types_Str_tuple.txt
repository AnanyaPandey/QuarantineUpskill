Collection Types_Str_tuple

Str
list
dict
tuple
range
set


########### Tuple ############
immutable sequence of arbitrary objects
new elements cannot be added

tuples have paranthesis. 
tup1 = ('hello',3.12,True)
tup1[2]
True

concatenate using + 
tup1 + tup2 

Repeat n times by n with *	
tup1 * 2 
('hello',3.12,True,'hello',3.12,True)

Nested Tuples - possibls
() are paranthesis by first priority. 
tup2 = ("Hello",)
# This will be considered as 1 element tuple

e = () #empty tuples.
p = 1,2,3,4,5
# This is also coneidered as tuples


def minmax(items):
	return(min(tems),max(items)) # returning a single Tuple 

Tuple unpacking : destructuring operation that unpacks data structure into named references

# two receivers to receive single tuple
lower,upper = minmax((1,2,3,4,4,5,6,7,7,8,8,6,6,6,6,6,5,4,,4,4,4,1))
lower and upper are not necessarily tuples

(a,(b,(c,d))) = (1,(2,(3,4)))
unpacks as : a=1 ; and b = 2, c = 3 and d = 4

a = 'jelly'
b='bean'
a,b = b,a
# Swapped !!! 

lista = [1,2,3,4,4,5,6,7,8,'android']
b = tuple(lista)

6 in b 
True

############### Strings ##################

len("sdfnskjfsfhjskfhs fjsfs fssdfsdfsfsfdf sdfskjfsdf kj")
50

"new" + " " + "Found" + "Hobby"

Strings are immutable -> cant modify inits place 
not the object - a new object is created 

str.join() # joins along with the separator in between if separator specified.

test = ':'.join("helo","Brother")
test
helo:Brother

test.split(':')
['helo','Brother']

''.join('Stone','Cold','Steve','Austin')
StoneColdSteveAustin

Partition
"Unforgettable".partition('forget')
('un','forget','table')

# returned a tuple , by default does a 3 partition 
dep,sep,arr = "London:EDinburag".partition(':')

#### String Formatting ####
"{0} degree north and {1} degree east".format(59.7,10.4)
"{} degree north and {} degree east".format(59.7,10.4)

"Galactic positions as : x = {pos[0]}, y = {pos[1]}, z = {pos[2]}".format(pos=(95.7,3.14,54.5))
# See pos is a tuple 


import math 
"Math constants : pi = {m.pi}, e={m.e}".format(m=math)
"Math constants : pi = {m.pi:.3f}, e={m.e:.4f}".format(m=math) # 3 and 4 decimal places

val = 40
'The value is {value}'.format(value=val)
value = 40
'The value is {value}'.format(value=value)

## Literal String Interpolation ## 
f strings fom python 3.6 and so forth
f'string and expression {exp}'
# This exp is calculated in runtime 

value = 4*20
f'The value is {value}'
'The value is 80'

import datetime
ANY - ANY python expression is evaluated in these {}
f'Current date time is {datetime.datetime.now().isoformat}'
f'Math Constants : pi={math.pi}, exp={math.e}'
f'Math constants : pi={math.pi:.3f}, exp = {math.e:.3f}'







