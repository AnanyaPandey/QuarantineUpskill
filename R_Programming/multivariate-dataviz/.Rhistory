ls
ls()
getwd()
install.packages('dplyr')
library(dplyr)
install.packages('dplyr',dependencies = TRUE, verbose = TRUE)
install.packages("dplyr", dependencies = TRUE, verbose = TRUE)
library(dplyr)
library(dplyr, warning(FALSE))
getwd()
library(dplyr, warning(FALSE))
library(dplyr, warnings(FALSE))
mtcars
damtcars = mtcars[1:10,c(1,4,6,7,9)]
damtcars
damtcars.mpg
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
mtcars
carsdata <- mtcars[5:25,]
carsdata
cars
carsdata
table(carsdata$mpg)
table(carsdata$cyl)
min(carsdata$mpg)
max(carsdata$mpg)
median(carsdata$mpg)
quantile(carsdata$mpg)
sd(carsdata$mpg)
mean(carsdata$mpg)
cor(carsdata$cyl,carsdata$mpg)
summary(carsdata)
str(carsdata)
library(ggplot2)
table(carsdata$mpg)
ggplot(
data = carsdata,
aes(x=cyl)) +
geom_bar() + # Create a bar chart;  of geometry. since we are making frequency chart
ggtitle("This is the main title ") +
xlab("X label") +
ylab("Y Label")
table(carsdata$cyl)
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram() +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=50) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=10) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=20) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=25) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(data=carsdata, aes(x=mpg,y=cyl)) +
geom_point() +
ggtitle("Plotting Comparison Scatter Plot") +
xlab("Miles Per Gallon") +
ylab("Number of Cylinders")
ggplot(data=carsdata, aes(x=cyl,y=mpg)) +
+ geom_point() +
+ ggtitle("Plotting Comparison Scatter Plot") +
+ xlab("Miles Per Gallon") +
+ ylab("Number of Cylinders")
ggplot(data=carsdata, aes(x=cyl,y=mpg)) +
geom_point() +
ggtitle("Plotting Comparison Scatter Plot") +
xlab("Miles Per Gallon") +
ylab("Number of Cylinders")
# 1 Qualittive and 1 quantitqative data
# best way is to compare the numeric values based on each category
# Also time series analysis can be performed conditioned by categorical values
# one row for each point in time
# Shape coded colour coded scatterplot ; Facetted scatter plots
# Multi series line chart : time series data ; Stacked area chart
# Faceted Line chart : facets for categorical variable
setwd("/Users/ananyapa/Gdrive/LEARNING/R_Programming/multivariate-dataviz")
movies <- read.csv("m2/Movies.csv")
movies2014 <- movies[movies$Year == 2014,]
library(RColorBrewer)
display.brewer.all() # To display all color palette
# There are 3 types of pallatte : Sequetial categorical and extremes
#Creating a color palette
# Take 4 colours from Set 2
colors <- brewer.pal(4,"Set2")
# Creatting a scatterplot
plot(
x = movies2014$Critic.Score,
y = movies2014$Box.Office,
col = colors(as.integer(movies2014$Rating)),
pch = 19, # Filled colour circles
main = "Plotting Revenue and Critic Score wrt Ratings",
xlab = "Critic Score",
ylab = "Movie Revenue"
)
legend(
x = "topleft",
legend = levels(movies2014$Rating),
col = colors[1:4],
pch = 19
)
# Creating a shape coded scatterplot
#First Create the Shapes
# these are the IDs of the shapes available in R
# Each ID represent different Shape
shapes <- c(1,4,2,7)
plot(
x = movies2014$Critic.Score,
y = movies2014$Box.Office,
pch = shapes[as.integer(movies2014$Rating)],
col = "blue",
main = "Plotting Revenue and Critic Score wrt Ratings",
xlab = "Critic Score",
ylab = "Movie Revenue"
)
# Including shape and color both coded
plot(
x = movies2014$Critic.Score,
y = movies2014$Box.Office,
pch = shapes[as.integer(movies2014$Rating)],
col = colors(as.integer(movies2014$Rating)),
main = "Plotting Revenue and Critic Score wrt Ratings",
xlab = "Critic Score",
ylab = "Movie Revenue"
)
legend(
x = "topleft",
legend = levels(movies2014$Rating),
col = colors[1:4],
pch = shapes[as.integer(movies2014$Rating)]
)
# Creating DATA filtered by categories/RAtings
gmovies <- movies2014[movies2014$Rating == "G",]
pgmovies <- movies2014[movies2014$Rating == "PG",]
pg13movies <- movies2014[movies2014$Rating == "PG-13",]
rmovies <- movies2014[movies2014$Rating == "R",]
par(mfrow = c(2,2))
plot(
x = gmovies$Critic.Score,
y = gmovies$Box.Office,
pch=19,
col = "skyblue",
main = "G",
xlab = "",
ylab = "Movie Revenue"
)
plot(
x = pgmovies$Critic.Score,
y = pgmovies$Box.Office,
pch=19,
col = "skyblue",
main = "PG",
xlab = "",
ylab = ""
)
plot(
x = pg13movies$Critic.Score,
y = pg13movies$Box.Office,
pch=19,
col = "skyblue",
main = "PG-13",
xlab = "Critic Score",
ylab = "Movie Revenue"
)
plot(
x = rmovies$Critic.Score,
y = rmovies$Box.Office,
pch=19,
col = "skyblue",
main = "R",
xlab = "Critic Score",
ylab = ""
)
par(mfrow = c(1,1))
#Loading the time series Data
times <- read.csv("m4/TimeSeries.csv")
# first lets create an emply plot,
plot(x = 0,
y = 0,
xlim = c(2000,2015),
ylim = c(0,max(times$G)),
type="l",
main = "Plotting Revenue and Critic Score wrt Ratings",
xlab = "Critic Score",
ylab = "Movie Revenue")
lines(
x = times$Year,
y = times$G,
col = colors[1]
)
lines(
x = times$Year,
y = times$PG,
col = colors[2]
)
lines(
x = times$Year,
y = times$PG13,
col = colors[3]
)
lines(
x = times$Year,
y = times$R,
col = colors[4]
)
legend(
x = "topleft",
legend = c("G","PG","PG-13","R"),
col = colors,
pch = 19
)
head(times)
times
par(mfrow = c(2,2))
par(mfrow = c(2,2))
plot(
x = times[,c(1,2)],
type = "l",
ylim = c(0,max(times$G)),
main = "G",
xlab = "",
ylab = "Box Office Revenue"
)
plot(
x = times[,c(1,3)],
type = "l",
ylim = c(0,max(times$G)),
main = "PG",
xlab = "",
ylab = ""
)
plot(
x = times[,c(1,4)],
type = "l",
ylim = c(0,max(times$G)),
main = "PG-13",
xlab = "Years",
ylab = "Box Office Revenue"
)
plot(
x = times[,c(1,5)],
type = "l",
ylim = c(0,max(times$G)),
main = "R",
xlab = "Years",
ylab = ""
)
par(mfrow = c(1,1))
ggplot(data = movies2014,aes(x = Critic.Score,y=Box.Office,color=Rating)) +
scale_color_manual(name = "Rating", labels = levels(movies2014$Rating)) +
geom_point() +
ggtitla("Movie Revenue wirt Critic Score") +
xlab("Critic Score") +
ylab("Movie Revenue")
library(ggplot2)
ggplot(data = movies2014,aes(x = Critic.Score,y=Box.Office,color=Rating)) +
scale_color_manual(name = "Rating", labels = levels(movies2014$Rating)) +
geom_point() +
ggtitla("Movie Revenue wirt Critic Score") +
xlab("Critic Score") +
ylab("Movie Revenue")
ggplot(data = movies2014,aes(x = Critic.Score,y=Box.Office,color=Rating)) +
scale_color_manual(name = "Rating", labels = levels(movies2014$Rating)) +
geom_point() +
ggtitle("Movie Revenue wirt Critic Score") +
xlab("Critic Score") +
ylab("Movie Revenue")
library(ggplot2)
ggplot(data = movies2014,aes(x = Critic.Score,y=Box.Office,color=Rating)) +
scale_color_manual(name = "Rating", labels = levels(movies2014$Rating), values = colors) +
geom_point() +
ggtitle("Movie Revenue wirt Critic Score") +
xlab("Critic Score") +
ylab("Movie Revenue")
ggplot(data = movies2014,aes(x = Critic.Score,y=Box.Office,fill=Rating)) +
scale_color_manual(name = "Rating", labels = levels(movies2014$Rating), values = colors) +
geom_point() +
ggtitle("Movie Revenue wirt Critic Score") +
xlab("Critic Score") +
ylab("Movie Revenue")
ggplot(data = movies2014,aes(x = Critic.Score,y=Box.Office,color=Rating)) +
scale_color_manual(name = "Rating", labels = levels(movies2014$Rating), values = colors) +
geom_point() +
ggtitle("Movie Revenue wirt Critic Score") +
xlab("Critic Score") +
ylab("Movie Revenue")
ggplot(data = movies2014,aes(x = Critic.Score,y=Box.Office,color=Rating)) +
geom_point() +
ggtitle("Movie Revenue wirt Critic Score") +
xlab("Critic Score") +
ylab("Movie Revenue")
ggplot(data = movies2014,aes(x = Critic.Score,y=Box.Office,color=Rating)) +
scale_color_manual(name = "Rating", labels = levels(movies2014$Rating), values = colors) +
geom_point() +
ggtitle("Movie Revenue wirt Critic Score") +
xlab("Critic Score") +
ylab("Movie Revenue")
ggplot(data = movies2014,aes(x = Critic.Score,y=Box.Office,shape=Rating)) +
scale_shape_manual(name = "Rating", labels = levels(movies2014$Rating), values = shapes) +
geom_point() +
ggtitle("Movie Revenue wirt Critic Score") +
xlab("Critic Score") +
ylab("Movie Revenue")
ggplot(data = movies2014,aes(x = Critic.Score,y=Box.Office,shape=Rating)) +
scale_shape_manual(name = "Rating", labels = levels(movies2014$Rating), values = shapes) +
scale_color_manual(name = "Rating", labels = levels(movies2014$Rating), values = colors) +
geom_point() +
ggtitle("Movie Revenue wirt Critic Score") +
xlab("Critic Score") +
ylab("Movie Revenue")
ggplot(data = movies2014,aes(x = Critic.Score,y=Box.Office)) +
geom_point() +
facet_wrap(facets = ~Rating) +
ggtitle("Movie Revenue wirt Critic Score") +
xlab("Critic Score") +
ylab("Movie Revenue")
# Now creting the multi series line chart for the time series data
# For years 2000 to 2015
# creating the row wise tabular representation
library(dplyr)
library(dplyr)
times2<- movies %>%
select(Year,Rating,Box.Office) %>%
group_by(Year,Rating) %>%
summarize(Box.Office = mean(Box.Office)) %>%
as.data.frame()
times2
ggplot(data = times2,aes(x = Year,y=Box.Office, color=Rating)) +
geom_line() +
ggtitle("Movie Revenue per Category Throughout") +
xlab("Years") +
ylab("Movie Revenue")
ggplot(data = times2,aes(x = Year,y=Box.Office, fill=Rating)) +
geom_area() +
ggtitle("Movie Revenue per Category Throughout") +
xlab("Years") +
ylab("Movie Revenue")
ggplot(data = times2,aes(x = Year,y=Box.Office)) +
geom_line() +
facet_wrap(facets = ~Rating) +
ggtitle("Movie Revenue per Category Throughout") +
xlab("Years") +
ylab("Movie Revenue")
gradient <- brewer.pal(5,"YlORd")
gradient <- brewer.pal(5,"YlOrRd")
palette(gradient)
plot(
x = movies2014$Runtime,
y = movies2014$Critic.Score,
col = cut(movies2014$Box.Office,5),
pch = 16,
main = "Plotting movie runtime and Critic Score",
xlab = "Length",
ylab = "Critic Score"
)
legend(
x = "topleft",
title = "Box Office",
legend  = levels(cut(movies2014$Box.Office,5)),
col = 1:5,
pch = 16,
cex = 0.75 # Shrink text to 0.75%
)
legend(
x = "left",
title = "Box Office",
legend  = levels(cut(movies2014$Box.Office,5)),
col = 1:5,
pch = 16,
cex = 0.75 # Shrink text to 0.75%
)
plot(
x = movies2014$Runtime,
y = movies2014$Critic.Score,
col = cut(movies2014$Box.Office,5),
pch = 16,
main = "Plotting movie runtime and Critic Score",
xlab = "Length",
ylab = "Critic Score"
)
legend(
x = "left",
title = "Box Office",
legend  = levels(cut(movies2014$Box.Office,5)),
col = 1:5,
pch = 16,
cex = 0.75 # Shrink text to 0.75%
)
divergent <- rev(brewer.pal(5,"dBu"))
#Creating a divergent color scale plot
palette(divergent)
plot(
x = movies2014$Runtime,
y = movies2014$Critic.Score,
col = cut(movies2014$Box.Office,5),
pch = 16,
main = "Plotting movie runtime and Critic Score",
xlab = "Length",
ylab = "Critic Score"
)
legend(
x = "left",
title = "Box Office",
legend  = levels(cut(movies2014$Box.Office,5)),
col = 1:5,
pch = 16,
cex = 0.75 # Shrink text to 0.75%
)
#Creating a divergent color scale plot
# Change the current pallete to divergent (we just created)
palette(divergent)
divergent <- rev(brewer.pal(5,"dBu"))
divergent <- rev(brewer.pal(5,"RdBu"))
#Creating a divergent color scale plot
# Change the current pallete to divergent (we just created)
palette(divergent)
plot(
x = movies2014$Runtime,
y = movies2014$Critic.Score,
col = cut(movies2014$Box.Office,5),
pch = 16,
main = "Plotting movie runtime and Critic Score",
xlab = "Length",
ylab = "Critic Score"
)
legend(
x = "left",
title = "Box Office",
legend  = levels(cut(movies2014$Box.Office,5)),
col = 1:5,
pch = 16,
cex = 0.75 # Shrink text to 0.75%
)
#Resetting the cor pallete to default
palette("default")
getsize <- function(values, scale) {
ratio <- values / max(values)
size <- sqrt(ratio / pi)
size*scale
}
plot(
x = movies2014$Runtime,
y = movies2014$Critic.Score,
cex = getsize(movies2014$Box.Office,5),
main = "Plotting movie runtime and Critic Score",
xlab = "Length",
ylab = "Critic Score"
)
plot(
x = movies2014$Runtime,
y = movies2014$Critic.Score,
cex = getsize(movies2014$Box.Office,5),
col = cut(movies2014$Box.Office,5),
main = "Plotting movie runtime and Critic Score",
xlab = "Length",
ylab = "Critic Score"
)
plot(
x = movies2014$Runtime,
y = movies2014$Critic.Score,
cex = getsize(movies2014$Box.Office,5),
main = "Plotting movie runtime and Critic Score",
xlab = "Length",
ylab = "Critic Score"
)
install.packages("scatterplot3d")
