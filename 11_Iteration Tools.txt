Iteration Tools

########################### Iteration Tools ###############################

itertools module provide many functions for iterators.

# for performing lazy slicing for any iterator 
itertools.islice()

from itertools import islice
islice(all_primes, 1000)

How will it generate all primes ?
range of arithmetic progression.

if we use range -> its limited, but we want unlimited open ended sequence.
itertools.count() # does the job.

def is_prime(n) : 
  
    # Corner cases 
    if (n <= 1) : 
        return False
    if (n <= 3) : 
        return True
  
    # This is checked so that we can skip  
    # middle five numbers in below loop 
    if (n % 2 == 0 or n % 3 == 0) : 
        return False
  
    i = 5
    while(i * i <= n) : 
        if (n % i == 0 or n % (i + 2) == 0) : 
            return False
        i = i + 6
  
    return True


from itertools import islice ## This is nothing but similar to list slicing, a part of Iterable will be returned 
from itertools import count  ## Has the capacity to count unlimite sequence 
thousandprimes = islice(( x for x in count() if is_prime(x)),1000)
thousandprimes # this ia slice of iterable and hence we cannot get entire iterable at once.
<Iterable object>
list(thousandprimes)[-10:]
sum(islice(( x for x in count() if is_prime(x)),1000)

any()
all()

any() # Returns True if any one item is True
all() # Returns True if and only if all items are True

any(is_prime(x) for x in range(1392,1986))

zip()
Synchronize iterations over two or more Iterables. 
sunday = [11,22,33,22,11,33,22]
monday = [55,44,55,66,44,33,22]
for items in zip(sunday,monday):
    print items

(11, 55)
(22, 44)
(33, 55)
(22, 66)
(11, 44)
(33, 33)
(22, 22)

for items in zip(sunday,monday):
    print(f"Average is {(sunday+monday)/2}")
    print(f"Min {min(items)}, Max = {max(items)},sum = {sum(items)}")

---------------
from itertools import chain 
temprature = chain(sunday,monday)
all( t > 0 for t in temprature)


---------------
for x in (p for p in lucas() if is_primt(p)):
    print(x)

# Iterators provide better readability and elegant coding. 
