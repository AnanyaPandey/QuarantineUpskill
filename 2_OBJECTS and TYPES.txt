OBJECTS and TYPES
############# OBJECTS and TYPES ################
1. Name refrences
2. Value v/s identity equality
3. Passing argument
4. scope to name access
5. everything is an object


####### Assigning variable ##########

x = 1000 
integers are mutable so 
x = 500 creates new space with 500 value and garbage collector collects 1000 

x=500
y=x
# pointing to same space. 

id() : returns the integer identifier for an object that is constant for the life of the object

a=496
id(a)
b=1729
id(b)

b=a
id(b) # returns id same as a
id(a) == id(b) 
True

id is used in debugging. 

is Operator 

a is b 
True

a is None
False

Mutable object : list 
Mutable means, same object is modified rather than creating new namespace
r = [2,4,6]
s =r

s[1] = 17
print(r[1])
17
r also changed when we changed s

s is r
True
so r and s both pointing to same object ( or location )

python only has named refrences to objects and not exactly variables

######### Value v/s identity ########

p = [1,4,7]
q = [1,4,7]

p == q 
True
p is q 
False

Value Equality : True because the value of both are same 
Identity equality : Both pointing to same position 

########## Passing arguments and returning ##############

m = [1,4,6]
def func(name):
	name.append(9)
	print("m = ",name)

func(m)
[1,4,6,9]
print(m)
[1,4,6]

----------
f = [14,23,37]
def replace(name)
	name = [12,34,56]
	print(name)

replace(f)
print(f)

[12,34,56]
[14,23,37]

Function arguments are transfered using pass by object reference
--> references to the objects are copied not the object themselves.


### default argument ###
## default arguments whould be defined right side of the arguments.
def func(inti,val = 100):
	print("inti is ",inti)
	print("value is",val)

func(120,130)
inti is 120
value is 130

func(120)
inti is 120
value is 100
print(line)

----------------
e.g.
import time
time.ctime()
def show_defa(arg=time.ctime()):
	print(arg)

show_defa()
'Wed Mar 25 13:06:28 2020'
show_defa()
'Wed Mar 25 13:06:28 2020'
show_defa()
'Wed Mar 25 13:06:28 2020'

Default arguments are assigned/evaluated when def is executed
Time is same : it is assigned when it is first called.

int or string i.e. immutables dont cause problem -- lists might !! 
Default arguments with mutable variables can cause problem

def add_spam(menu=[]):
	menu.append("spam")
	return(menu)

breakfast  = ['egg','bacon']
add_spam(breakfast)

lunch=['baked beans']
add_spam(lunch)

add_spam()
['spam']
add_spam()
['spam','spam']
add_spam()
['spam','spam','spam']

ALWAYS USE IMMUTABLE VARIABLES IN DEFAULT ARGUMENTS

# here is the workaround if we need to use the list anyway
if no argument is sent this takes care but what if you need two such arguments.??? 
def funca(menu=None):
	if menu = None:
		menu=[]
	menu.append('spam')
	return menu