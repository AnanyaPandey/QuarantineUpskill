ls
ls()
getwd()
install.packages('dplyr')
library(dplyr)
install.packages('dplyr',dependencies = TRUE, verbose = TRUE)
install.packages("dplyr", dependencies = TRUE, verbose = TRUE)
library(dplyr)
library(dplyr, warning(FALSE))
getwd()
library(dplyr, warning(FALSE))
library(dplyr, warnings(FALSE))
mtcars
damtcars = mtcars[1:10,c(1,4,6,7,9)]
damtcars
damtcars.mpg
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
mtcars
carsdata <- mtcars[5:25,]
carsdata
cars
carsdata
table(carsdata$mpg)
table(carsdata$cyl)
min(carsdata$mpg)
max(carsdata$mpg)
median(carsdata$mpg)
quantile(carsdata$mpg)
sd(carsdata$mpg)
mean(carsdata$mpg)
cor(carsdata$cyl,carsdata$mpg)
summary(carsdata)
str(carsdata)
library(ggplot2)
table(carsdata$mpg)
ggplot(
data = carsdata,
aes(x=cyl)) +
geom_bar() + # Create a bar chart;  of geometry. since we are making frequency chart
ggtitle("This is the main title ") +
xlab("X label") +
ylab("Y Label")
table(carsdata$cyl)
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram() +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=50) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=10) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=20) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(
data = carsdata,
aes(x=mpg)) +
geom_histogram(bins=25) +
ggtitle("Fuel Economy Master Frequency Table") +
xlab("X label") +
ylab("Y Label")
ggplot(data=carsdata, aes(x=mpg,y=cyl)) +
geom_point() +
ggtitle("Plotting Comparison Scatter Plot") +
xlab("Miles Per Gallon") +
ylab("Number of Cylinders")
ggplot(data=carsdata, aes(x=cyl,y=mpg)) +
+ geom_point() +
+ ggtitle("Plotting Comparison Scatter Plot") +
+ xlab("Miles Per Gallon") +
+ ylab("Number of Cylinders")
ggplot(data=carsdata, aes(x=cyl,y=mpg)) +
geom_point() +
ggtitle("Plotting Comparison Scatter Plot") +
xlab("Miles Per Gallon") +
ylab("Number of Cylinders")
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
install.packages("markdown")
library(ggplot2)
ggplot() +
borders(database="world",colour="grey50",fill = "grey90") +
ggtitle("Base Map of world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
install.packages("maps")
library(ggplot2)
ggplot() +
borders(database="world",colour="grey50",fill = "grey90") +
ggtitle("Base Map of world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
Setting the path
```
setwd("/Users/ananyapa/Gdrive/LEARNING/R_Programming/advanced-dataviz")
```
Setting the path
```
setwd("/Users/ananyapa/Gdrive/LEARNING/R_Programming/advanced-dataviz")
Setting the path and importing data
```
setwd("/Users/ananyapa/Gdrive/LEARNING/R_Programming/advanced-dataviz")
moviesbycountry <- read.csv("Spatial_Analysis/moviesbycountry.csv")
head(moviesbycountry)
moviesbycountry
```{r}
# Creating a base map without any data on top of it.
# write COLOUR instead of color to supress the warning althugh both produce same result
library(ggplot2)
ggplot() +
borders(database="world",colour="grey50",fill = "grey90") +
ggtitle("Base Map of world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
```
**Creating a dot density map**
```
ggplot(data = moviesbycountry) +
borders(database = "world", colour = "grey60", fill = "grey90") +
geom_point(aes(x = Latitude, y = Longitude)) +
ggtitle("Movies Distribution across world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
```
ggplot(data = moviesbycountry) +
borders(database = "world", colour = "grey60", fill = "grey90") +
geom_point(aes(x = Latitude, y = Longitude)) +
ggtitle("Movies Distribution across world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
```{r}
# Creating a base map without any data on top of it.
# write COLOUR instead of color to supress the warning althugh both produce same result
library(ggplot2)
library(maps)
ggplot() +
borders(database="world",colour="grey50",fill = "grey90") +
ggtitle("Base Map of world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
```
**Creating a dot density map**
```
ggplot(data = moviesbycountry) +
borders(database = "world", colour = "grey60", fill = "grey90") +
geom_point(aes(x = Latitude, y = Longitude)) +
ggtitle("Movies Distribution across world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
ggplot(data = moviesbycountry) +
borders(database = "world", colour = "grey60", fill = "grey90") +
geom_point(aes(x = Latitude, y = Longitude)) +
ggtitle("Movies Distribution across world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
min(moviesbycountry$Latitude)
max(moviesbycountry$Latitude)
min(moviesbycountry$Longitude)
max(moviesbycountry$Longitude)
ggplot(data = moviesbycountry) +
borders(database = "world", colour = "grey60", fill = "grey90",
xlim = c(-42,65), ylim = c(-114,174)) +
geom_point(aes(x = Latitude, y = Longitude)) +
ggtitle("Movies Distribution across world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
ggplot(data = moviesbycountry) +
borders(database = "world", colour = "grey60", fill = "grey90") +
geom_point(aes(x = Latitude, y = Longitude)) +
ggtitle("Movies Distribution across world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
ggplot(data = movies) +
borders(database = "world", colour = "grey60", fill = "grey90") +
geom_density2d(aes(y = Latitude, x = Longitude)) +
ggtitle("Movies Distribution across world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
ggplot(data = moviesbycountry) +
borders(database = "world", colour = "grey60", fill = "grey90") +
geom_density2d(aes(y = Latitude, x = Longitude)) +
ggtitle("Movies Distribution across world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
ggplot(data = moviesbycountry) +
borders(database = "world", colour = "grey60", fill = "grey90") +
geom_point(aes(y = Latitude, x = Longitude)) +
ggtitle("Movies Distribution across world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
ggplot(data = moviesbycountry) +
borders(database = "world", colour = "grey60", fill = "grey90") +
coord_cartesian(xlim = c(-20,59), ylim = c(35,71)) +
geom_density2d(aes(x = Longitude, y = Latitude)) +
ggtitle("Movies Distribution across world") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
ggplot(data = moviesbycountry) +
borders(database = "world", colour = "grey60", fill = "grey90") +
coord_cartesian(xlim = c(-20,59), ylim = c(35,71)) +
geom_density2d(aes(x = Longitude, y = Latitude)) +
ggtitle("Movies Distribution across Europe") +
xlab("") +
ylab("") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
ggplot(data = moviesbycountry) +
borders(database = "world", colour = "grey60", fill = "grey90") +
coord_cartesian(xlim = c(-20,59), ylim = c(35,71)) +
stat_density2d(aes(x = Longitude, y = Latitude, alpha = ..level..),
geom = "polygon",
fill = "blue") +
ggtitle("Movies Distribution across Europe") +
xlab("") +
ylab("") +
labs(alpha = "Density") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
countries <- read.csv("Spatial_Analysis/Countries.csv")
countries
ggplot(data = countries) +
borders(database = "world", colour = "grey60", fill = "grey90") +
geom_point(aes(x = Longitude, y = Latitude, size = Count)) +
scale_size_area(max_size = 5) +
ggtitle("Movies Distribution across Europe") +
xlab("") +
ylab("") +
labs(size = "Movies") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
map <- map_data("world")
head(map)
map
We will now join the map data with countries daya
library(dplyr)
countries2 <- countries %>%
left_join(map, by = c("Country","region")) %>%
select(Country, Longitude = Long, Latitude = Lat, Group = group, Order = order, Count) %>%
arrange(Order) %>%
as.data.frame()
countries2 <- countries %>%
left_join(map, by = c("Country","region")) %>%
select(Country, Longitude = Long, Latitude = Lat, Group = group, Order = order, Count) %>%
arrange(Order) %>%
as.data.frame()
countries2 <- countries %>%
left_join(map, by = c("Country" = "region")) %>%
select(Country, Longitude = Long, Latitude = Lat, Group = group, Order = order, Count) %>%
arrange(Order) %>%
as.data.frame()
head(countries1)
head(countries2)
countries2 <- countries %>%
left_join(map, by = c("Country" = "region")) %>%
select(Country, Longitude = Long, Latitude = Lat, Group = group, Order = order, Count) %>%
arrange(Order) %>%
as.data.frame()
countries2 <- countries %>%
left_join(map, by = c("Country" = "region")) %>%
select(Country, Longitude = long, Latitude = lat, Group = group, Order = order, Count) %>%
arrange(Order) %>%
as.data.frame()
View(countries2)
countries2
ggplot(data = countries2) +
borders(database = "world", colour = "grey60", fill = "grey90") +
geom_polygon(aes(x = Longitude, y = Latitude, group = Group, fill = Count, color = "grey60")) +
scale_fill_gradient(low = "white", high = "red") +
ggtitle("Movies Distribution across Europe") +
xlab("") +
ylab("") +
labs(color = "Movies") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
ggplot(data = countries2) +
borders(database = "world", colour = "grey60", fill = "grey90") +
geom_polygon(aes(x = Longitude, y = Latitude, group = Group, fill = Count), color = "grey60") +
scale_fill_gradient(low = "white", high = "red") +
ggtitle("Movies Distribution across Europe") +
xlab("") +
ylab("") +
labs(color = "Movies") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
ggplot(data = countries2) +
borders(database = "world", colour = "grey60", fill = "grey90") +
coord_map(projection = "ortho", orientation = c(41,-74, 0)) +
geom_polygon(aes(x = Longitude, y = Latitude, group = Group, fill = Count), color = "grey60") +
scale_fill_gradient(low = "white", high = "red") +
ggtitle("Movies Distribution across Europe") +
xlab("") +
ylab("") +
labs(color = "Movies") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
install.packages("mapproj")
ggplot(data = countries2) +
borders(database = "world", colour = "grey60", fill = "grey90") +
coord_map(projection = "ortho", orientation = c(41,-74, 0)) +
geom_polygon(aes(x = Longitude, y = Latitude, group = Group, fill = Count), color = "grey60") +
scale_fill_gradient(low = "white", high = "red") +
ggtitle("Movies Distribution across Europe") +
xlab("") +
ylab("") +
labs(color = "Movies") +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
