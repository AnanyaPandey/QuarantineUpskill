Type System 

3. Type System 
4. scope to name access
5. everything is an object


Python's type is a dynamic type system
def add(a,b):
	return a+b

add(2,3)
add(2.5,5.7)
add('news ','paper')

Python will not implicitly conver thte type from one to another 
therefore add('Hello',21) will return an error. 

########### Scopes in Python ############

local : inside the function
enclosing : inside enclosing function
Global : at top level of module available throuhout program
Built-in : in the special built in modules

LEGB 

How to introduce global variables ? 

def GLOBALVARIABLE():
import GLOBALVARIABLE

rebind global names into a local namespace : by using global keyword

count = 0 
def showcount():
	print(count)

def setcount(c):
	count = c

def setgcount(c):
	global count
	count = c

show_count()
0
setcount(200)
showcount()
0
setgcount(200)
showcount()
200

We follow pattern not to kill the complexity but to master it 

######## Everything is an object #########

import words
type(words)
<class 'module'>
dir(words)
# Returns all the attributes of the module words.
# including the functions we defined.

type(words.fetch_words)
<class 'function'>
dir(words.fetch_words)
all attributes of the function 

words.fetch_words.__name__ # name  of the attribute i.e. function
words.fetch_words.__doc__ # doc string provided in the function 

=================================================


Think in terms of reference objects rather thaan variables/values
is() = check if both point to the same object..


